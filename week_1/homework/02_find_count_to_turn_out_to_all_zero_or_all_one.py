# Q. 0과 1로만 이루어진 문자열이 주어졌을 때, 이 문자를 모두 0, 혹은 모두 1로 같게 만들어야 한다.
# 할 수 있는 행동은 연속된 하나의 숫자를 잡고 모두 뒤집는 것 이다. 뒤집는 것은 1을 0으로, 0을 1로 바꾸는 것을 의미한다.
#
# 주어진 문자열을 모두 0 혹은 모두 1로 같게 만드는 최소 횟수를 반환하시오.



# 알고리즘 문제를 풀다보면, 문제 자체를 이해하기 힘들 때가 있습니다.
#
# 그럴 때는 다음과 같이 해보세요!
#
# 1. 바로 코드를 작성하지 말고, 문제의 다른 예시들을 떠올리면서 규칙성을 생각해보세요.
# ex) 00000 은 최소 횟수를 어떻게 구할까?
#
# 2. 배웠던 자료구조를 활용하면 어떨지 생각해보세요!
# ex) (추후에 배울)스택, 큐를 활용하면 어떨까?
#
# 3. 문제의 특징들을 하나하나 글로 써보세요!
# ex) 문자열을 뒤집어야 하는데, 0으로 할지 1으로 할지 고민 된다. 뒤집는 걸 감지할만한 시점은 0에서 1로, 1에서 0으로 바뀌는 시점인데, 초기에 0인지 1인지도 횟수에 연관이 있다.
#
# 이 과정을 통해 문제에 대해 더 깊게 파악한다면, 금방 풀이방법을 떠올릴 수 있을거에요!


# 이 문자열을 모두 0 혹은 1로 만들기 위해서는 두가지 방법이 있습니다.
#
# 1. 모두 0으로 만드는 방법
# 1) 4번째 원소와 5번째 원소를 잡고 뒤집으면? 0000000 이 됩니다.
#
# 문자열을 순서대로 탐색하다보면
# 뒤집는 시점은 바로 0에서 1로 변할 때 뒤집어야 하는 걸 감지할 수 있습니다!
#
#
# 2. 모두 1으로 만드는 방법
# 1) 1번째 원소와 3번째 원소를 잡고 뒤집으면? 1111100 이 됩니다.
# 2) 6번째 원소와 7번째 원소를 잡고 뒤집으면? 1111111 이 됩니다.
#
# 문자열을 순서대로 탐색하다보면
# 뒤집는 시점은 1에서 0으로 변할 때 뒤집어야 하는 걸 감지할 수 있습니다.
#
# 즉, 모두 0으로 만드는 방법이 1회이므로 최소 횟수입니다!



input = "011110"
# 011110
# 모두 0으로 만드는 방법에서 최소로 뒤집는 숫자
# COUNT_to_all_zero
# 0 -> 1로 문자열이 전환되는 순간 COUNT_to_all_zero +=1

def find_count_to_turn_out_to_all_zero_or_all_one(string):
    count_to_all_zero = 0
    count_to_all_one = 0

    if string[0] == '0':
        count_to_all_one += 1
    elif string[0] == '1':
        count_to_all_zero += 1

    for i in range(len(string) - 1):
        if string[i] != string[i + 1]:
            if string[i + 1] == '0':
                count_to_all_one += 1
            if string[i + 1] == '1':
                count_to_all_zero += 1

    return min(count_to_all_one, count_to_all_zero)


result = find_count_to_turn_out_to_all_zero_or_all_one(input)
print(result)



# "뒤집는 횟수" 에 대한 판단을 어떻게 할 수 있을까요?
#
# 이에 대해 손가락을 짚어가며 문자열을 따라가다보면,
# 바로 0에서 1로 변하는 순간 혹은 1에서 0으로 변하는 순간입니다.
#
# 0에서 1로 변한다는 소리는, 0으로 다시 뒤집어야 하니 전체를 0으로 만들기 위한 숫자가 +1 됩니다.
# 1에서 0으로 변한다는 소리는, 1로 다시 뒤집어야 하니 전체를 1로 만들기 위한 숫자가 +1 됩니다.
#
# 이 생각을 코드로 구현하시면 됩니다!
#
# 예를 들어서 01100 이라는 문자열을 조회할 때,
# 0번째 원소인 `0` 에서 1번째 원소 `1` 로 변경되었으니 전체를 0으로 만들기 위한 숫자가 +1 되었습니다. 그리고 2번째 원소인 `1` 에서 3번째 원소인 `0` 으로 변경될 때 전체를 1으로 만들기 위한 숫자가 +1 됩니다.
#
# 엇, 그런데 아까 봤던 숫자랑 다르네요?
#
# 모두 1으로 만드는 방법은 `2` 회 였는데..
# 다시 위에 올라가서 보면, 0번째 원소와 1번째 원소도 뒤집어줘야 합니다.
# 이 경우를 인지하기 위해서는, 가장 첫 번째 원소가 0인지 1인지를 파악해줘야 합니다.
#
# 즉,
# 1) 뒤집어 질 경우
# 2) 첫 번째 원소가 0인지 1인지
# 에 대해서 계산하면, 모두 0으로 만드는 횟수와 모두 1로 만드는 횟수를 만들 수 있습니다.
#
# 그리고 0으로 만드는 횟수와 모두 1로 만드는 횟수 둘 중 최솟값을 반환해주면 됩니다!