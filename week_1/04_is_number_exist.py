# 점근 표기법 : 알고리즘의 성능을 수학적으로 표기하는 방법입니다. 알고리즘의 “효율성”을 평가하는 방법입니다.
# 점근 표기법(asymptotic notation)은 어떤 함수의 증가 양상을 다른 함수와의 비교로 표현하는 수론과 해석학의 방법이다.
# 저희가 지금까지 이 함수는 N 정도의 시간과 공간이 걸리겠구나 하면서 분석했던 게 점근 표기법의 일종

# 점근 표기법의 종류
# 빅오(Big-O)표기법, 빅 오메가(Big-Ω) 표기법
# 빅오 표기법은 최악의 성능이 나올 때 어느 정도의 연산량이 걸릴것인지,
# 빅오메가 표기법은 최선의 성능이 나올 때 어느 정도의 연산량이 걸릴것인지에 대해 표기

# 빅오 표기법으로 표시하면 O(N),
# 빅 오메가 표기법으로 표시하면 Ω(1) 의 시간복잡도를 가진 알고리즘

# 즉 위의 경우로 아래 문제를 생각하면
# 빅오 표기법으로 표시하면 O(N),
# 빅 오메가 표기법으로 표시하면 Ω(1) 의 시간복잡도를 가진 알고리즘이다!
# 라고 말할 수 있습니다.


# 이것만 기억하면 됩니다.
#
# 1. 입력값에 비례해서 얼마나 늘어날지 파악해보자. $1$ ? $N$ ? $N^2$ ?
# 2. 공간복잡도 보다는 시간 복잡도를 더 줄이기 위해 고민하자.
# 3. 최악의 경우에 시간이 얼마나 소요될지(빅오 표기법)에 대해 고민하자



# 배열에서 특정 요소 찾기

# Q. 다음과 같은 숫자로 이루어진 배열이 있을 때, 이 배열 내에 특정 숫자가 존재한다면 True, 존재하지 않다면 False 를 반환하시오.

# 배열을 돌면서 배열의 원소가 찾고자하는 숫자와 같은지 비교합니다. 만약 같다면 True 를 반환하고, 끝까지 없다면 False 를 반환합니다.



input = [3, 5, 6, 1, 2, 4]


def is_number_exist(number, array):
    # 이 부분을 채워보세요!
    for element in array:   # array 의 길이만큼 아래 연산이 실행
        if number == element:   # 비교 연산 1번 실행
            return True          # N *1 = N만큼

    return False


result = is_number_exist(3, input)



print(result)